package agents.MaastCTS2.libs.it.unimi.dsi;

/*		 
 * DSI utilities
 *
 * Copyright (C) 2002-2014 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU Lesser General Public License as published by the Free
 *  Software Foundation; either version 3 of the License, or (at your option)
 *  any later version.
 *
 *  This library is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
 *  for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses/>.
 *
 */

import java.util.concurrent.atomic.AtomicLong;

/** All-purpose static-method container class.
 * 
 * <p><strong>Warning</strong>: All methods related to <a
 * href="http://logging.apache.org/log4j/1.2/">Log4J 1.2</a> are now deprecated, as we are switching
 * to <a href="http://www.slf4j.org/"><acronym
 * title="Simple Logging Facade for Java">SLF4J</acronym></a> for all logging activity. If you were
 * using {@link #getLogger(Class)}, just replace all occurrences of {@link #getLogger(Class)} with
 * {@link LoggerFactory#getLogger(Class)} (some other minor modifications to your source code might
 * be required).
 * 
 * <p>Note that while {@link ProgressLogger} will still support for a while <a
 * href="http://logging.apache.org/log4j/1.2/">Log4J 1.2</a>, {@link #getLogger(Class)} and
 * {@link #ensureLog4JIsConfigured(Class, Level)} ensure just minimal support.
 * 
 * @author Sebastiano Vigna
 * @since 0.1 
 * 
 * 
 * 
 * Modified by Dennis Soemers to only contain the code that is required by XorShift64StarRandom,
 * and nothing else		( 02-02-2016 )
 */

public final class Util {
	private Util() {}
	
	private static final AtomicLong seedUniquifier = new AtomicLong();	

	/** Returns a random seed generated by taking a unique increasing long, adding
	 * {@link System#nanoTime()} and scrambling the result using the finalisation step of Austin
	 * Appleby's <a href="http://sites.google.com/site/murmurhash/">MurmurHash3</a>.
	 * 
	 * @return a reasonably good random seed. 
	 */
	public static long randomSeed() {
		long seed = seedUniquifier.incrementAndGet() + System.nanoTime();

		seed ^= seed >>> 33;
		seed *= 0xff51afd7ed558ccdL;
		seed ^= seed >>> 33;
		seed *= 0xc4ceb9fe1a85ec53L;
		seed ^= seed >>> 33;

		return seed;
	}
}
